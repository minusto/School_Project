<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kosta.mapper.Mapper">
	<cache />
	<!-- 시스템관리자 ==> 학교관리자 등록 -->
	<insert id="insertSchoolAdmin" parameterType="SchoolAdmin">
		insert into SchoolAdmin(
			SchoolAdminId,SchoolAdminPassword,SchoolAdminName,SchoolAdminTel,DeleteRequest
		)
		values(
			#{schoolAdminId},'1234',#{schoolAdminName},#{schoolAdminTel},'n'
		)
	</insert>
	<insert id="insertSchoolAdminRegist" parameterType="SchoolAdminRegist">
		insert into SchoolAdminRegist(
			SystemAdminId,SchoolAdminId,SchoolRegistDate,SchoolEndDate
		)values(
			#{systemAdminId},#{schoolAdminId},SYSDATE,#{schoolEndDate}
		)
	</insert>
	<!-- 학생목록 출력 -->
	<select id="studentList" resultType="StudentList">
		SELECT m.memberid, m.membername, m.memberbirthday, m.schoolid, st.studentcode, st.studentgrade, st.studentclass, st.studentnum, st.studentgender, st.studentmajor 
		FROM member m, student st
		WHERE m.memberid = st.memberid
		AND st.studentCode IS NOT NULL
		ORDER BY m.memberid
	</select>

	<!-- 학부모 정보 입력 -->
	<update id="insertParent" parameterType="Parent">
		UPDATE parent SET 
			parentName = #{parentName}, familyRelation =  #{familyRelation}, memberId = #{memberId}
		WHERE parentId = #{parentId}
	</update>

	<!-- 액터 : 시스템관리자 ==> 학교관리자 리스트 출력 schoolAdminList.jsp -->
	<select id="adminList" resultType="AdminList">
		select a.schooladminid,a.schooladmintel,a.deleterequest,b.schoolregistdate,b.schoolenddate
		from schooladmin a,schooladminregist b
		where a.schooladminid=b.schooladminid
	</select>

	<!-- 액터 : 교사 => 학부모리스트 출력 -->
	<select id="parentList" resultType="ParentList">
		SELECT p.parentId, p.parentName, p.familyRelation, st.memberId, m.memberName
		FROM parent p, student st, member m
		WHERE p.memberId = st.memberId
			AND st.memberId = m.memberId
	</select>
	<!-- 액터 : 교내관리자 => 학교등록  -->
	<insert id="insertSchool" parameterType="school">
		INSERT INTO school(
		schoolId , schoolName , schoolAddress , schoolTel
		)VALUES(
		#{schoolId}, #{schoolName} , #{schoolAddress} , #{schoolTel}
		)
	</insert>
	
	<!-- 액터 : 시스템관리자 ==> 학교관리자 상세보기 -->
	<select id="schoolAdminDetail" resultType="SchoolAdminDetail" parameterType="String">
		SELECT s.schoolname,sa.schooladminid,sa.schooladminname,sa.schooladmintel,
		sa.deleterequest,sar.schoolregistdate,sar.schoolenddate
		FROM schooladmin sa,schoolregist sr,school s,schooladminregist sar
		WHERE sa.schooladminid=sr.schooladminid
		AND sr.schoolid=s.schoolid
		AND sa.schooladminid=sar.schooladminid
		AND sa.schooladminid=#{id}
	</select>
	
	<!-- 액터 : 학교관리자 ==> 교사등록 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO member(
			memberId , memberName , memberBirthday , memberTel
			, memberEmail , memberNote , memberPassword , memberAddress , schoolId
		)VALUES(
			#{memberId} , #{memberName} , #{memberBirthday} , #{memberTel}
			, #{memberEmail} , #{memberNote} ,'1234' , #{memberAddress} , #{schoolId}
		)
	</insert>
	<insert id="insertTeacher" parameterType="teacher">
		INSERT INTO teacher(
		teacherClass , teacherPicture , teacherPosition , subjectId  , memberId
		)VALUES(
		${teacherClass}, #{teacherPicture} , #{teacherPosition} , #{subjectId} , #{memberId}
		)
	</insert>
	
	<!-- 액터 : 학교관리자 ==> 교사리스트 -->
	<select id="listTeacher" resultType="TeacherDetail" parameterType="String">
	SELECT m.memberId , m.memberBirthday , m.memberTel , m.memberEmail , m.memberName , t.teacherClass , t.subjectId
	FROM teacher t , member m , registmanage r
	WHERE t.memberId = m.memberId
	AND  m.memberId=r.memberId
	AND r.schooladminid=#{id}
	</select>
	
	<!-- 액터 : 학교관리자 ==> 교사리스트 ==> 상세보기 --> 
	<select id="detailTeacher" resultType="TeacherDetail" parameterType="String">
	SELECT * FROM teacher t , member m
	WHERE t.memberId = m.memberId
	AND m.memberId = #{memberId}
	</select>
	
	<!-- 액터 : 모든사용자 ==> 로그인정보 확인 -->
	<select id="memberCheck" resultType="MemberCheck" parameterType="String">
		SELECT m.memberid,m.memberpassword,rm.membergrade
		FROM member m,registmanage rm
		WHERE m.memberid=rm.memberid
		AND m.memberid=#{id}
	</select>
	
	<!-- 액터 : 모든사용자 ==> 유저 정보 출력 -->	
	<select id="memberDetail" parameterType="String" resultType="Member">
		SELECT *
		FROM member
		WHERE memberid=#{id}
	</select>
	
	<!-- 액터 : 모든사용자 ==> 최초 로그인 비밀번호 1234일 경우 비밀번호 변경 -->
	<update id="userModPassowrd" parameterType="Member">
		UPDATE member 
		SET memberpassword = #{memberPassword}
		WHERE memberid=#{memberId}
	</update>
	<!-- 교사==>학생 입력 및 수정 -->
	<update id="updateMember" parameterType="Member">
		UPDATE member SET
		memberName = #{memberName},
		memberBirthday = #{memberBirthday},
		memberAddress = #{memberAddress},
		memberTel = #{memberTel},
		memberNote = #{memberNote},
		memberEmail = #{memberEmail}
		WHERE memberId = #{memberId}
	</update>
	
	<!-- 교사==>학생 입력 및 수정 -->
	<update id="updateStudent" parameterType="Student">
		UPDATE student SET
		StudentCode = #{studentCode},
		StudentGrade = #{studentGrade},
		StudentClass = #{studentClass},
		StudentNum = #{studentNum},
		StudentGender = #{studentGender},
		StudentMajor = #{studentMajor},
		StudentPicture = #{studentPicture}
		WHERE memberId = #{memberId}
	</update>
	<!-- 교사 ==> 학생 정보 NULL LIST -->
	<select id="studentNullList" resultType="StudentNullList">
		SELECT memberId FROM student
		WHERE studentCode IS NULL
	</select>
	<!-- 교사 ==> 학생 세부 열람 -->
	<select id="selectStudentDetail" resultType="StudentDetail" parameterType="String">
		SELECT m.memberId, m.memberName, m.memberBirthday, m.memberAddress,
		 m.memberTel, m.memberEmail, m.memberNote, m.schoolId,
		st.studentCode, st.studentGrade, st.studentClass, st.studentNum, st.studentGender, 
		st.studentMajor, st.studentPicture
		FROM member m, student st
		WHERE m.memberId = st.memberId
		AND m.memberId = #{m_id}
		ORDER BY m.memberId
	</select>
	<!-- 교사 ==> 학생 내용 삭제 -->
	<update id="deleteStudent" parameterType="String">
		UPDATE member SET
		memberName = NULL,
		memberBirthday = NULL,
		memberAddress = NULL,
		memberTel = NULL,
		memberNote = NULL,
		memberEmail = NULL
		WHERE memberId = #{m_id}
	</update>
	<!-- 교사 ==> 학생 내용 삭제 -->
	<update id="deleteStudent2" parameterType="String">
	UPDATE student SET
		studentCode = NULL,
		studentGrade = NULL,
		studentClass = NULL,
		studentNum = NULL,
		studentGender = NULL,
		studentMajor = NULL,
		studentPicture = NULL
		WHERE memberId = #{m_id}
	</update>
	
	<!-- 액터 : 교사 ==> 학생 모의고사 점수 입력 - 정보가 입력된 학생 리스트 가져오기 -->
	<select id="selectExistStudent" resultType="ExistStudentList">
		SELECT m.memberId, m.memberName, s.studentCode, s.studentGrade, s.studentclass, s.studentNum
		FROM student s, member m
		WHERE s.memberId = m.memberId
		AND studentCode IS NOT NULL 
	</select>
	<!-- 액터 : 교사 => 학생 모의고사 점수 입력 - 탐구 과목 리스트 가져오기 -->
	<select id="selectResearchSubjectList" resultType="ResearchSubject">
		SELECT * FROM researchSubject ORDER BY researchSubjectId
	</select>
	<!-- 액터 : 교사 => 학생 모의고사 점수 입력 - 제2외국어 과목 리스트 가져오기 -->
	<select id="selectSecondLanguageSubjectList" resultType="SecondLanguage">
		SELECT * FROM secondLanguage ORDER BY languageId
	</select>
	<!-- 액터 : 교사 => 학생 모의고사 점수 입력 - 모의고사 아이디 가져오기 -->
	<select id="selectMockId" parameterType="MockType" resultType="String">
		SELECT mockId FROM MockType WHERE mockYear = #{mockYear} AND mockMonth = #{mockMonth} AND mockGrade = #{mockGrade}
	</select>
	<!-- 액터 : 교사 ==> 학생 모의고사 점수 입력 - 탐구과목 아이디 가져오기 -->
	<select id="selectResearchId" parameterType="String" resultType="String">
		SELECT researchSubjectId FROM researchSubject WHERE researchSubjectName = #{researchName}
	</select>
	<!-- 액터 : 교사 => 학생 모의고사 점수 입력 - 제2외국어 아이디 가져오기 -->
	<select id="selectSecondLanguageId" parameterType="String" resultType="String">
		SELECT languageId FROM secondLanguage WHERE languageSubjectName = #{languageSubjectName}
	</select>
	<!-- 액터 : 교사 ==> 학생 모의고사 점수 입력 - 모의고사 점수 넣기 - 1학년 -->
	<insert id="insertMockTest1Grade" parameterType="MockTest">
		INSERT INTO mockTest(
			mockId, memberId, languageOriginalScore, languageStandardScore, languageType, mathType, mathOriginalScore, mathStandardScore, englishOriginalScore, englishStandardScore, languageId
		)
		VALUES (
			#{mockId}, #{memberId}, #{languageOriginalScore}, #{languageStandardScore}, '', '', #{mathOriginalScore}, #{mathStandardScore}, #{englishOriginalScore}, #{englishStandardScore}, ''
		)
	</insert>
	<!-- 액터 : 교사 ==> 학생 모의고사 점수 입력 - 모의고사 점수 넣기 - 2학년 -->
	<insert id="insertMockTest2Grade" parameterType="MockTest">
		INSERT INTO mockTest(
			mockId, memberId, languageOriginalScore, languageStandardScore, languageType, mathType, mathOriginalScore, mathStandardScore, englishOriginalScore, englishStandardScore, languageId
		)
		VALUES (
			#{mockId}, #{memberId}, #{languageOriginalScore}, #{languageStandardScore}, '', #{mathType}, #{mathOriginalScore}, #{mathStandardScore}, #{englishOriginalScore}, #{englishStandardScore}, #{languageId}
		)
	</insert>
	<!-- 액터 : 교사 ==> 학생 모의고사 점수 입력 - 모의고사 점수 넣기 - 2학년 -->
	<insert id="insertMockTest3Grade" parameterType="MockTest">
		INSERT INTO mockTest(
			mockId, memberId, languageOriginalScore, languageStandardScore, languageType, mathType, mathOriginalScore, mathStandardScore, englishOriginalScore, englishStandardScore, languageId
		)
		VALUES (
			#{mockId}, #{memberId}, #{languageOriginalScore}, #{languageStandardScore}, #{languageType}, #{mathType}, #{mathOriginalScore}, #{mathStandardScore}, #{englishOriginalScore}, #{englishStandardScore}, #{languageId}
		)
	</insert>
	<!-- 액터 : 교사 ==> 학생 모의고사 점수 입력 - 탐구 점수 넣기 -->
	<insert id="insertResearchScore" parameterType="ResearchSubjectScore">
		INSERT INTO researchSubjectScore (
			mockId, memberId, researchSubjectId, researchSubjectOriginalScore, researchSubjectStandardScore
		)
		VALUES (
			#{mockId}, #{memberId}, #{researchSubjectId}, #{researchSubjectOriginalScore}, #{researchSubjectStandardScore}
		)
	</insert>
	<!-- 액터 : 교사 ==> 학생 모의고사 점수 입력 - 제2외국어 점수 넣기 - 2학년, 3학년만 -->
	<insert id="insertSecondLangScore" parameterType="SecondLanguageScore">
		INSERT INTO secondLanguageScore (
			mockId, memberId, secondLanguageOriginalScore, secondLanguageStandardScore
		)
		VALUES (
			#{mockId}, #{memberId}, #{secondLanguageOriginalScore}, #{secondLanguageStandardScore}
		)
	</insert>
	
	<!-- 공지사항 글번호 -->
	<select id="noticeBoardNum" resultType="Integer">
		select max(NoticeBoardNum) from noticeBoard
	</select>
	
	<!-- 학교관리자 ==>공지사항등록 -->
	<insert id="insertNoticeBoard" parameterType="NoticeBoard">
		INSERT INTO noticeBoard(
			noticeBoardNum,noticeBoardTitle,noticeBoardDate,noticeBoardPassword,
			noticeBoardHitcount,noticeBoardFileName,noticeBoardContent,schoolAdminId
		)VALUES(
			#{noticeBoardNum}, #{noticeBoardTitle} ,SYSDATE,#{noticeBoardPassword},
		    0 , #{noticeBoardFileName}, #{noticeBoardContent} ,#{schoolAdminId}
		)
	</insert>
	
	<!-- 페이지 갯수 -->
	<select id="noticeCountBoard" resultType="int" parameterType="Search">
		select count(*) from noticeBoard
		<if test="area != null">
			<where>
				<foreach collection="area" item="item" separator="or" open="(" close=")">
					${item} LIKE #{searchKey}
				</foreach>
			</where>
		</if>
	</select>
	
	<!-- 공지사항 목록 -->
	<select id="noticeBoardList" resultType="NoticeBoard" parameterType="Search">
		select * from noticeBoard 
		<if test="area != null">
			<where>
				<foreach collection="area" item="item" separator="or" open="(" close=")">
					${item} LIKE #{searchKey}
				</foreach>
			</where>
		</if>
		order by noticeBoardNum DESC
	</select>
	
	<!--  공지사항 조회수 -->
	 <update id="addHitcount" parameterType="int">
		update noticeBoard set noticeBoardHitcount = noticeBoardHitcount + 1 where noticeBoardNum = #{noticeBoardNum}
	</update>
	
	<!-- 공지사항 상세보기 -->
	<select id="noticeBoardDetail" parameterType="int" resultType="NoticeBoard">
		select * from noticeBoard where noticeBoardNum = #{noticeBoardNum}
	</select>

	<!-- 학교정보조회 -->
	<select id="schoolDetail" resultType="School" parameterType="String">
	SELECT * 
	FROM SCHOOL
	WHERE schoolId=#{id}
	</select>

	<!-- 액터 : 시스템 ==> 학교관리자 테이블 정보 조회 -->
	<select id="schoolAdminInfoDetail" resultType="SchoolAdmin" parameterType="String">
		SELECT * 
		FROM schooladmin
		WHERE schooladminid=#{id}
	</select>
	
	<!-- 액터 : 시스템  ==> 학부모 테이블 정보 조회 -->
	<select id="parentInfoDetail" resultType="Parent" parameterType="String">
		SELECT * 
		FROM parent
		WHERE parentid=#{id}
	</select>
	
	<!-- 액터 : 시스템 ==> 시스템 테이블 관리자 정보조회 -->
	<select id="systemAdminInfoDetail" resultType="SystemAdmin" parameterType="String">
		SELECT *
		FROM systemadmin
		WHERE systemAdminId=#{id}
	</select>
	
	<!-- 액터 : 학부모 ==> 최초로그인 비밀번호 변경 -->
	<update id="parentModPassword" parameterType="Parent">
		UPDATE parent
		SET parentpassword = #{parentPassword}
		WHERE parentid=#{parentId}
	</update>

	<!-- 액터 : 학교관리자 ==> 최초로그인 비밀번호 변경 -->
	<update id="schoolAdminModPassword" parameterType="SchoolAdmin">
		UPDATE schooladmin
		SET schoolAdminPassword = #{schoolAdminPassword}
		WHERE schoolAdminId=#{schoolAdminId}
	</update>
	
	<insert id="insertSchoolRegist" parameterType="SchoolRegist">
		INSERT into schoolregist values(#{schoolId},#{schoolAdminId})
	</insert>
	
	<!-- 액터  : 교사 ==> 학부모 정보 NULL LIST -->
	<select id="parentNullList" resultType="ParentNullList">
		SELECT parentId FROM parent
		WHERE memberId IS NULL
	</select>
	<!-- 과목정보조회 -->
	<select id="subjectList" resultType="Subject">
		SELECT * FROM subject
	</select>
	<!-- 학교정보조회  -->
	<select id="schoolList" resultType="School">
		SELECT * FROM school
	</select>
	
		<!-- 사용자 등급 등록 -->
	<insert id="insertRegistManage" parameterType="RegistManage">
		insert into RegistManage (
			registNum, schoolAdminId, memberId, memberGrade
		)values(
			REGISTMANAGE_SEQ.NEXTVAL,#{schoolAdminId},#{memberId},#{memberGrade}
		)
	</insert>
	
	<!-- 사용자 iD 등록 -->
	<insert id="insertMemberId" parameterType="member">
		INSERT INTO member(
			memberId , memberName , memberBirthday , memberTel
			, memberEmail , memberNote , memberPassword , memberAddress , schoolId
		)VALUES(
			#{memberId} , null , null , null
			, null ,null ,'1234' ,null ,#{schoolId}
		)
	</insert>
	
	<!-- 학생 iD 등록 +나머지 null -->
	<insert id="insertStudentIdManage" parameterType="Student">
		INSERT INTO student(
			memberId , studentCode , studentGrade , studentClass
			, studentNum , studentGender , studentMajor , studentPicture
		)VALUES(
			#{memberId} , '' ,  ''  ,  '' 
			  ,  ''  , ''  , ''  , ''  
		)
	</insert>
	

<!-- 학부모 아이디 -->
<insert id="insertParentId" parameterType="String">
		INSERT INTO parent(
			parentId , familyRelation , parentName , parentPassword
			, memberId
		)VALUES(
			#{parentId} , null , null , '1234' , null
		)
	</insert>
	
<!-- 		 	사용자 ID목록  -->
	<select id="userList" parameterType="String"  resultType="RegistManage">
	SELECT *
	FROM RegistManage
	WHERE schooladminid=#{id}
	</select>
	
 	<!-- 	교사 등급 등록  --> 
	<insert id="insertTeacherGrade" parameterType="RegistManage">
		insert into RegistManage (
			registNum, schoolAdminId, memberId, memberGrade
		)values(
			REGISTMANAGE_SEQ.NEXTVAL,#{schoolAdminId}, #{memberId},'교사'
		)
	</insert>
	
	<select id="schoolRegistSchoolId" parameterType="String" resultType="SchoolRegist">
		SELECT * 
		FROM schoolregist
		WHERE schooladminid=#{id}
	</select>
	
	<!-- 액터 : 교사 ==> 학교관리자 ID를 추출해서 학교ID를 추출하기 위한 용도 -->
	<select id="getSchoolAdminId" parameterType="String"  resultType="RegistManage">
	SELECT *
	FROM RegistManage
	WHERE memberid=#{id}
	</select>
	
</mapper>
